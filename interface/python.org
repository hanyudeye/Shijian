* python

** 统计字数

   #+begin_src python
     txt="hello, world. nice to meet you ."
     # split 指定一个分隔符分割子字符串，并存储为 列表
     words=txt.split()
     print(len(words))
   #+end_src

** 统计文本 字数

  #+begin_src python
    from pathlib import Path
    
    filename="python.org"
    
    path=Path(filename)
    
    try:
        contents=path.read_text(encoding='utf-8')
    except FileNotFoundError:
        pass
    else:
        words=contents.split()
        print(len(words))
#+end_src

** base64编码

   #+begin_src python
     import base64
     
     content="hello"
     b64=base64.b64encode(content.encode())
     print(b64)
     
     print(base64.b64decode(b64).decode())
     
#+end_src


* 当您刚开始学习Python开发时，练习题是一个很好的方式来巩固所学知识，并提高编程技能。下面是一些适合初级开发者的Python练习题：

** 1. **打印Hello World：** 编写一个Python程序，在屏幕上打印出 "Hello, World!"。

#+begin_src python
  print("Hello, World!")
#+end_src

** 2. **计算器：** 编写一个程序，接受两个数字和一个操作符（如 +、-、*、/），然后输出计算结果。

#+begin_src python
def  calculator(x,y,operator):
       if operator == '+':
           return x + y
       elif operator == '-':
           return x - y
       elif operator == '*':
           return x * y
       elif operator == '/':
           return x / y
       else:
           return "Wrong"
print(calculator(1,3,'+') )
print(calculator(1,3,'-') )
print(calculator(2,3,'*') )
print(calculator(2,3,'/') )
#+end_src



** 3. **求平方和：** 编写一个函数，接受一个整数 n 作为参数，计算并返回从 1 到 n 的所有整数的平方和。

** 4. **检查质数：** 编写一个函数，接受一个整数作为参数，检查该数是否为质数（只能被1和自身整除）。

** 5. **猜数字游戏：** 编写一个猜数字的小游戏。程序随机生成一个1到100之间的数字，然后提示用户猜这个数字，直到猜对为止。游戏应该给出适当的提示，告诉用户是猜大了还是猜小了。

** 6. **字符串逆序：** 编写一个函数，接受一个字符串作为参数，返回该字符串的逆序字符串。

** 7. **计算阶乘：** 编写一个函数，接受一个整数 n 作为参数，计算并返回 n 的阶乘。

** 8. **统计字母个数：** 编写一个函数，接受一个字符串作为参数，统计并返回该字符串中每个字母出现的次数。

** 9. **翻转列表：** 编写一个函数，接受一个列表作为参数，返回该列表的逆序列表。

** 10. **文件操作：** 编写一个程序，读取一个文本文件，并统计其中的单词数、行数以及字符数。

** 这些练习题涵盖了Python中的基本概念，包括数据类型、控制流、函数、文件操作等。通过完成这些练习，您可以逐步提高Python编程的技能水平。

* 对于已经具备Python基础的开发者，中级练习题可以帮助您深化理解并提高编程技能。这些练习涵盖了更复杂的概念，包括列表推导、字典操作、模块使用、异常处理、装饰器、类和文件操作等。以下是一些适合中级Python开发者的练习题：

** 1. **斐波那契数列生成器：** 编写一个生成器函数，能够无限生成斐波那契数列的元素。

#+begin_src python
  def fibonacci_generator():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# 使用生成器函数生成斐波那契数列的前10个元素
fibonacci_gen = fibonacci_generator()
for _ in range(10):
    print(next(fibonacci_gen))


#+end_src


** 2. **高阶函数应用：** 编写一个高阶函数，接受另一个函数和一个列表作为参数，返回一个新列表，新列表中的元素是原列表元素经过函数处理后的结果。

3. **使用装饰器：** 编写一个装饰器，可以计算任何函数执行的时间，并在函数执行完成后打印出来。

4. **CSV文件解析器：** 编写一个程序，读取一个CSV文件，并将其内容转换为一个字典列表。每个字典代表CSV中的一行，其中键是列标题。

5. **异常处理：** 编写一个函数，接受两个整数参数，返回他们的商。如果分母为零，捕获异常，并返回一个合理的错误消息。

6. **类的继承和多态：** 设计一个基类 Vehicle，包含基本属性如名称、最大速度和载重量，然后设计几个派生类如 Car 和 Truck，为它们添加特有的属性或方法。

7. **使用正则表达式：** 编写一个函数，使用正则表达式从文本中找出所有的邮箱地址，并返回一个列表。

8. **网络请求：** 使用Python的 `requests` 模块，编写一个函数，从指定的API获取数据，并处理这些数据（如打印或保存到文件）。

9. **数据过滤和排序：** 编写一个函数，接受一个包含字典的列表（例如，来自某API的响应），根据字典中的某个键的值进行过滤和排序。

** 10. **简单的Web应用：** 使用Flask或Django框架，创建一个简单的Web应用，它有一个表单，用户可以提交数据，然后数据被显示在另一个页面上。
#+begin_src 
  
#+end_src


这些练习题旨在提高您在Python编程中的技巧，涉及更复杂的数据处理、文件操作和网络编程，同时还有机会了解一些高级的Python特性，如生成器、装饰器和类继承。通过这些练习，您可以更好地为高级开发工作做准备。
