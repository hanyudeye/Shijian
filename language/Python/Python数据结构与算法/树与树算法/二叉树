树的概念
树是一种抽象数据类型(ADT)或是是做这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据结合。它是由n(n>=1)个有限节点组成的一个具有层次关系的集合。
把它叫做树是因为看起来像一棵倒挂的树，也就是说它根朝上，而叶朝下的，它具有以下的特征：
1.每个节点有0个或者多个子节点
2.没有父节点称为根节点
3.每一个非跟节点有且只有一个父节点
4.出了根节点外，每个子节点可以分为多个不想交的子树

节点的度：一个节点含有的子树的个数成为该节点的度
树的度：一棵树中，最大节点的度
叶节点或者终端节点：度为0的节点
父节点：若一个节点含有子节点，则这个节点成为子节点的父节点
子节点：一个含有子树的根节点称为该节点的子节点
兄弟节点：具有相同父节点的节点互称为兄弟节点
节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推
树的高度或深度：树中节点的最大层次
堂兄弟节点：父节点在同一层的节点互称为堂兄弟
节点的祖先：从根到该节点所经分支上的所有节点
子孙：以某一节点为根的子树中任一节点都称为该节点的子孙
森林：由m棵互不相交的树的集合称为森林

树的种类
无序树：树中任一节点之间没有顺序关系
有序树：树中任一节点的子节点之间有顺序关系
     二叉树：每个节点最多包含有两个子树
       完全二叉树：在最后一层节点之上所有的节点都是满节点，但是最后一层不要求满的
       满二叉树：所有的节点都是满的，就是每个节点都有两个子节点
       平衡二叉树：任何节点的两个子树的高度差不超过1
       排序二叉树：树的左边节点值始终小于右边节点
     霍夫曼树
     B树

树的存储方式
顺序存储
链表存储

#####################################
二叉树
二叉树的特性：5条

广度优先(层次优先)遍历
深度对应，竖向是深度，横向是广度

深度优先遍历
先序遍历：  根节点 -> 左子树 -> 右子树
中序遍历：  左子树 -> 根节点 -> 右子树
后序遍历：  左子树 -> 右子树 -> 根节点

给序列得出二叉树图
一定要有中序遍历，用来确定根位置，然后可以根据其余一个遍历还找另一个遍历
