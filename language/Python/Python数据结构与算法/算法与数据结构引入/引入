#############################################
算法引入
算法的概念
算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务。
一般的，当算法在处理信息时，会从输入设备或数据的存储地址读取数据，把结果写入输出设备或某个存储地址供以后在调用
独立存在的，独立于语言
算法的五大特性：
1.输入  0或者多个输入
2.输出  至少一个输出
3.有穷性   有限的步骤
4.确切性
5.可行性

算法
每台机器执行的总时间不同，但是执行基本运算数量大体相同
时间复杂度：基本运算数量
分的越细致，衡量的越准确，但是不需要那么细的,只要知道数量级就可以
时间复杂度：假设存在函数g，使得算法处理规模为n的问题示例所用的时间为T(n)=O(g(n)),责成O(g(n))为算法A的渐进时间复杂度，简称时间复杂度，记为T(n)
最坏时间复杂度：算法完成工作最多需要多少基本操作，一般指的就是这个，在这个时间复杂度内一定能够完成该工作，是一种保证。
最优时间复杂度：算法完成工作最少需要多少基本操作
平均时间复杂度：算法完成工作平均需要多少基本操作

时间复杂度的几条基本计算规则
1.基本操作，即只有常数项，认为其时间复杂度为O(1)
2.顺序结构，时间复杂度按假发进行计算
3.循环结构，时间复杂度按乘法进行计算
4.分支结构，时间复杂度取最大值
5.判断一个算法的效率的时候，往往只需要关注操作数量的最高次数，其他次要项和常数项都可以忽略
6.一般指的都是最坏时间复杂度

常见时间复杂度
执行次数函数举例        阶      非正式术语
12                  O(1)      常数阶
2n+3                O(n)      线性阶
3n^2+2^n+1         O(n^2)     平方阶
5log2n+20          O(logn)    对数阶
2n+3nlog2n+19      O(nlogn)   nlogn阶
6n^3+2n^2+3n+4     O(n^3)     立方阶
2^n                O(2^n)     指数阶

时间复杂度排序：
O(1)<O(logn)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)

Python内置类型性能分析
timeit模块
列表的数据结构决定从尾部插入append比从头部插入insert要快的多

列表中操作的时间复杂度
index          O(1)
append         O(1)
pop            O(1)   # 在列表末尾弹出
pop(i)         O(n)
insert         O(n)
iteration      O(n)
contains       O(n)
get slice(x,y) O(k)
del slice      O(n)
set slice      O(n+k)
reverse        O(n)
+              O(k)  # k是你加的后面的列表的长度
sort           O(nlogn)
multiply       O(nk)

字典中操作的时间复杂度
copy           O(n)
get item       O(1)
set item       O(1)
delete item    O(1)
contain        O(1)
iteration      O(n)

#################################
数据结构引入
数据是一个抽象的概念，将其进行分类后得到程序设计语言中的基本类型，如：int，float，char等。数据元素之间不是独立的，存在特定的关系，这些关系便是结构，
数据结构指数据对象中数据元素之间的关系

程序 = 数据结构 + 算法
抽象数据类型：是指一个数学模型以及定义在此数学模型上的一组操作。即把数据类型和数据类型上的运算绑定在一起，进行封装。
引入抽象数据类型的目的是把数据类型的表示和数据类型上运算的实现与这些数据类型和运算在程序中的引用隔开，使他们相互独立。





















